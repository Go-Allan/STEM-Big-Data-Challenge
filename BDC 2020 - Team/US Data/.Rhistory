boxplot(samples[,n+1],samples[,n+2],samples[,n+3], xlab = "Estimator", ylab = "sample variance")
abline(h=4)
hist(samples[,n+3])
#question 2
boxplot(samples[,n+1],samples[,n+2],samples[,n+3], xlab = "Estimator", ylab = "Sample Variance", main = "boxplot comparing three estimators")
#question 1
n = 10
N = 10000
mu = 15
sigma = 2
#empty matrix
samples <- matrix(NA, nrow = N, ncol = n+3)
for (i in 1:N){
samples[i,1:n] <- rnorm(n, mean=mu, sd=sigma)
deviation <- samples[i,1:n] - mean(samples[i,1:n])
samples[i,n+1] = (1/n)*sum((deviation)^2)     #corresponding to (s0)^2
samples[i,n+2] = (1/(n-1))*sum((deviation)^2) #corresponding to (s1)^2
samples[i,n+3] = (1/(n-2))*sum((deviation)^2) #corresponding to (s2)^2
}
#question 2
boxplot(samples[,n+1],samples[,n+2],samples[,n+3], xlab = "Estimator", ylab = "Sample Variance", main = "boxplot comparing three estimators")
abline(h=4)
#question 1
n = 10
N = 10000
mu = 15
sigma = 2
#empty matrix
samples <- matrix(NA, nrow = N, ncol = n+3)
for (i in 1:N){
samples[i,1:n] <- rnorm(n, mean=mu, sd=sigma)
deviation <- samples[i,1:n] - mean(samples[i,1:n])
samples[i,n+1] = (1/n)*sum((deviation)^2)     #corresponding to (s0)^2
samples[i,n+2] = (1/(n-1))*sum((deviation)^2) #corresponding to (s1)^2
samples[i,n+3] = (1/(n-2))*sum((deviation)^2) #corresponding to (s2)^2
}
#question 2
boxplot(samples[,n+1],samples[,n+2],samples[,n+3], xlab = "Estimator", ylab = "Sample Variance", main = "boxplot comparing three estimators")
abline(h=4)
#question 2
boxplot(samples[,n+1],samples[,n+2],samples[,n+3], xlab = "Estimator", ylab = "Sample Variance")
abline(h=4)
abline(h=4, "pink")
abline(h=4, "pink")
abline(h=4, col = "pink")
abline(h=4, col = "green")
#question 3
summary(samples[,n+1])
summary(samples[,n+1])
summary(samples[,n+2])
summary(samples[,n+3])
sd(samples[,n+1])
sd(samples[,n+2])
sd(samples[,n+3])
hist(samples[,n+3])
boxplot(samples[,n+1],samples[,n+2],samples[,n+3], xlab = "Estimator", ylab = "Sample Variance")
abline(h=4, col = "green")
summary(samples[,n+1])
summary(samples[,n+2])
summary(samples[,n+3])
N <- 10000 # number of iteration
n <- 16 # sample size
m <- 10 # mean
s <- sqrt(9) # SD
alpha <- 0.05 # (1-confidence level)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate <- evaluate.true <- rep(FALSE, N) # 2 blank vectors
in.CI <- function(x){ (x[1]<=m & m<=x[2])} # Define a function called in.CI. The input x is a 2-element vector, representing an interval. If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
for (i in 1:N){ # loop starts
Sample <- rnorm(n, m, s) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),    mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )  # Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*
qnorm(alpha/2, 0, 1)*s/sqrt(n),   mean(Sample) + (-1)*
qnorm(alpha/2, 0, 1)*s/sqrt(n) )  # Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])  # m is contained in 1st CI when SD unknown?  evaluate.true[i] <- in.CI(nw[i,])  # m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*", "")[as.numeric(evaluate[i]) + 1 ],    "and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) + 1], "\n") # print the results for i-th CIs }
sum(evaluate == FALSE)/N # count and make a ratio sum(evaluate.true == FALSE)/N # count and make a ratio
p = runif(18, 2,6)
runif(18, 2,6)
plot(p)
p = runif(18, 2,6)
plot(p)
hist(p)
p = runif(18, 2,6)
N <- 10000 # number of iteration
n <- 18 # sample size
m <- 10 # mean
s <- sqrt(9) # SD
alpha <- 0.05 # (1-confidence level)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate <- evaluate.true <- rep(FALSE, N) # 2 blank vectors
in.CI <- function(x){ (x[1]<=m & m<=x[2])} # Define a function called in.CI. The input x is a 2-element vector, representing an interval. If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
for (i in 1:N){ # loop starts
Sample <- rnorm(n, m, s) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),    mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )  # Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*
qnorm(alpha/2, 0, 1)*s/sqrt(n),   mean(Sample) + (-1)*
qnorm(alpha/2, 0, 1)*s/sqrt(n) )  # Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])  # m is contained in 1st CI when SD unknown?  evaluate.true[i] <- in.CI(nw[i,])  # m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*", "")[as.numeric(evaluate[i]) + 1 ],    "and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) + 1], "\n") # print the results for i-th CIs }
sum(evaluate == FALSE)/N # count and make a ratio sum(evaluate.true == FALSE)/N # count and make a ratio
qnorm?
?qnorm
end
exit
esc
R
r
R
q()
N = 10000 # number of iteration
n = 18 # sample size
m = 2 # lower bound
s = 6 # upper bound
# m = 4 # mean
# s = sqrt(9) # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- runif(n, m, s) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])
# m is contained in 1st CI when SD unknown?
evaluate.true[i] <- in.CI(nw[i,])
# m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
"")[as.numeric(evaluate[i]) + 1 ],
"and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
1], "\n") # print the results for i-th CIs
}
sum(evaluate == FALSE)/N # count and make a ratio
sum(evaluate.true == FALSE)/N # count and make a ratio
exit
N = 10000 # number of iteration
n = 18 # sample size
m = 2 # lower bound
s = 6 # upper bound
# m = 4 # mean
# s = sqrt(9) # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- runif(n, m, s) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qunif(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qunif(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])
# m is contained in 1st CI when SD unknown?
evaluate.true[i] <- in.CI(nw[i,])
# m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
"")[as.numeric(evaluate[i]) + 1 ],
"and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
1], "\n") # print the results for i-th CIs
}
sum(evaluate == FALSE)/N # count and make a ratio
sum(evaluate.true == FALSE)/N # count and make a ratio
N = 10000 # number of iteration
n = 18 # sample size
a = 2 # lower bound
b = 6 # upper bound
m = (a+b)/2 # mean
s = ((b-a)^2)/12 # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- rnorm(n, m, s) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])
# m is contained in 1st CI when SD unknown?
evaluate.true[i] <- in.CI(nw[i,])
# m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
"")[as.numeric(evaluate[i]) + 1 ],
"and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
1], "\n") # print the results for i-th CIs
}
sum(evaluate == FALSE)/N # count and make a ratio
sum(evaluate.true == FALSE)/N # count and make a ratio
N = 10000 # number of iteration
n = 18 # sample size
a = 2 # lower bound
b = 6 # upper bound
m = (a+b)/2 # mean
s = ((b-a)^2)/12 # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- rnorm(n, m, s) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
evaluate[i] <- in.CI(un[i,])
# m is contained in 1st CI when SD unknown?
evaluate.true[i] <- in.CI(nw[i,])
# m is contained in 2nd CI when SD known?
cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
"")[as.numeric(evaluate[i]) + 1 ],
"and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
1], "\n") # print the results for i-th CIs
}
sum(evaluate) #== FALSE)/N # count and make a ratio
sum(evaluate.true)# == FALSE)/N # count and make a ratio
N = 10000 # number of iteration
n = 18 # sample size
a = 2 # lower bound
b = 6 # upper bound
m = (a+b)/2 # mean
s = sqrt(((b-a)^2)/12) # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
# evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
# in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
in.CI = function(x){ (x[1]<=m & m<=x[2])}
evaluate <- apply(un, MARGIN = 1, FUN = in.CI)
# m is contained in 1st CI when SD unknown?
evaluate.true <- apply(nw, MARGIN=1, FUN = in.CI)
# m is contained in 2nd CI when SD known?
#  cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
#"")[as.numeric(evaluate[i]) + 1 ],
#  "and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
#1], "\n") # print the results for i-th CIs
#}
sum(evaluate) #== FALSE)/N # count and make a ratio
sum(evaluate.true)# == FALSE)/N # count and make a ratio
N = 10000 # number of iteration
n = 18 # sample size
a = 2 # lower bound
b = 6 # upper bound
m = (a+b)/2 # mean
s = sqrt(((b-a)^2)/12) # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
# evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
# in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
in.CI = function(x){ (x[1]<=m & m<=x[2])}
evaluate <- apply(un, MARGIN = 1, FUN = in.CI)
# m is contained in 1st CI when SD unknown?
evaluate.true <- apply(nw, MARGIN=1, FUN = in.CI)
# m is contained in 2nd CI when SD known?
#  cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
#"")[as.numeric(evaluate[i]) + 1 ],
#  "and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
#1], "\n") # print the results for i-th CIs
}
sum(evaluate) #== FALSE)/N # count and make a ratio
sum(evaluate.true)# == FALSE)/N # count and make a ratio
N = 10000 # number of iteration
n = 18 # sample size
a = 2 # lower bound
b = 6 # upper bound
m = (a+b)/2 # mean
s = sqrt(((b-a)^2)/12) # population SD
alpha <- 0.05 # (1-confidence level)
un = nw = matrix(NA, nrow =N, ncol =2) # 2 blank matrices
# evaluate = evaluate.true <- rep(FALSE, N) # 2 blank vectors filled with N falses
# Define a function called in.CI.
# The input x is a 2-element vector, representing an interval.
# If m is within the interval, in.CI return TRUE, otherwise returns FALSE.
# in.CI = function(x){ (x[1]<=m & m<=x[2])}
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # generate normal variates with given parameters
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# Calculate the i-th confidence interval for estimated SD
nw[i,] <- c(mean(Sample) - (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*	qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# Calculate the i-th confidence interval for known SD
}
in.CI = function(x){ (x[1]<=m & m<=x[2])}
evaluate <- apply(un, MARGIN = 1, FUN = in.CI)
# m is contained in 1st CI when SD unknown?
evaluate.true <- apply(nw, MARGIN=1, FUN = in.CI)
# m is contained in 2nd CI when SD known?
#  cat(i, ": Intervals (", round(un[i,], 2), ")", c("*",
#"")[as.numeric(evaluate[i]) + 1 ],
#  "and (", round(nw[i,],2), ")", c("*", "")[as.numeric(evaluate.true[i]) +
#1], "\n") # print the results for i-th CIs
#}
sum(evaluate) # == FALSE)/N # count and make a ratio
sum(evaluate.true) # == FALSE)/N # count and make a ratio
N <- 10000 # number of iterations
n <- 18 # sample size
a <- 2 # lower limit of the uniform distribution Unif(2, 6)
b <- 6 # upper limit of the uniform distribution Unif(2, 6)
alpha <- 0.05 # significant level
m <- (a+b)/2 # population mean, E(X), where X ~ Unif(a,b)
s <- sqrt(((b-a)^2)/12) # population standard deviation, sd(X)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # randomly generate n samples from Unif(a,b)
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n), mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) ) # calculate the i-th confidence interval using estimated sd
nw[i,] <- c(mean(Sample) - (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n), mean(Sample) + (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n) ) # calculate the i-th confidence interval using population sd
}
# Let’s define a function in.CI(), which can automatically detect # whether m falls in a CI or not. # Here x is a vector with 2 elements, representing a CI # If m falls in x, the output is TRUE; otherwise, it returns FALSE.
in.CI <- function(x){ (x[1]<=m & m<=x[2])}
# For each row of un and nw, we apply in.CI() to evaluate the calculated CIs evaluate <- apply(un, MARGIN=1, FUN=in.CI) # MARGIN=1 indicates rows evaluate.true <- apply(nw, MARGIN=1, FUN=in.CI)
# How many times the CI contains the true mean m?
sum(evaluate)
sum(evaluate.true)
N <- 10000 # number of iterations
n <- 18 # sample size
a <- 2 # lower limit of the uniform distribution Unif(2, 6)
b <- 6 # upper limit of the uniform distribution Unif(2, 6)
alpha <- 0.05 # significant level
m <- (a+b)/2 # population mean, E(X), where X ~ Unif(a,b)
s <- sqrt(((b-a)^2)/12) # population standard deviation, sd(X)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # randomly generate n samples from Unif(a,b)
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n), mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) ) # calculate the i-th confidence interval using estimated sd
nw[i,] <- c(mean(Sample) - (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n), mean(Sample) + (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n) ) # calculate the i-th confidence interval using population sd
}
# Let’s define a function in.CI(), which can automatically detect # whether m falls in a CI or not. # Here x is a vector with 2 elements, representing a CI # If m falls in x, the output is TRUE; otherwise, it returns FALSE.
in.CI <- function(x){ (x[1]<=m & m<=x[2])}
# For each row of un and nw, we apply in.CI() to evaluate the calculated CIs evaluate <- apply(un, MARGIN=1, FUN=in.CI) # MARGIN=1 indicates rows evaluate.true <- apply(nw, MARGIN=1, FUN=in.CI)
# How many times the CI contains the true mean m?
w= sum(evaluate)
w2= sum(evaluate.true)
q()
N <- 10000 # number of iterations
n <- 18 # sample size
a <- 2 # lower limit of the uniform distribution Unif(2, 6)
b <- 6 # upper limit of the uniform distribution Unif(2, 6)
alpha <- 0.05 # significant level
m <- (a+b)/2 # population mean, E(X), where X ~ Unif(a,b)
s <- sqrt(((b-a)^2)/12) # population standard deviation, sd(X)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # randomly generate n samples from Unif(a,b)
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n), mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) ) # calculate the i-th confidence interval using estimated sd
nw[i,] <- c(mean(Sample) - (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n), mean(Sample) + (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n) ) # calculate the i-th confidence interval using population sd
}
# Let’s define a function in.CI(), which can automatically detect # whether m falls in a CI or not. # Here x is a vector with 2 elements, representing a CI # If m falls in x, the output is TRUE; otherwise, it returns FALSE.
in.CI <- function(x){ (x[1]<=m & m<=x[2])}
# For each row of un and nw, we apply in.CI() to evaluate the calculated CIs evaluate <- apply(un, MARGIN=1, FUN=in.CI) # MARGIN=1 indicates rows evaluate.true <- apply(nw, MARGIN=1, FUN=in.CI)
# How many times the CI contains the true mean m?
sum(evaluate)
sum(evaluate.true)
sum(evaluate)
sum(evaluate.true)
N <- 10000 # number of iterations
n <- 18 # sample size
a <- 2 # lower limit of the uniform distribution Unif(2, 6)
b <- 6 # upper limit of the uniform distribution Unif(2, 6)
alpha <- 0.05 # significant level
m <- (a+b)/2 # population mean, E(X), where X ~ Unif(a,b)
s <- sqrt(((b-a)^2)/12) # population standard deviation, sd(X)
un <- nw <- matrix(NA, nrow =N, ncol =2) # 2 blank matrices
for (i in 1:N){ # loop starts
Sample <- runif(n, a, b) # randomly generate n samples from Unif(a,b)
un[i,] <- c(mean(Sample) - (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n),
mean(Sample) + (-1)*qt(alpha/2, df = n - 1)*sd(Sample)/sqrt(n) )
# calculate the i-th confidence interval using estimated sd
nw[i,] <- c(mean(Sample) - (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n),
mean(Sample) + (-1)*qnorm(alpha/2, 0, 1)*s/sqrt(n) )
# calculate the i-th confidence interval using population sd
}
# Let’s define a function in.CI(), which can automatically detect # whether m falls in a CI or not. # Here x is a vector with 2 elements, representing a CI # If m falls in x, the output is TRUE; otherwise, it returns FALSE.
in.CI <- function(x){ (x[1]<=m & m<=x[2])}
# For each row of un and nw, we apply in.CI() to evaluate the calculated CIs
evaluate <- apply(un, MARGIN=1, FUN=in.CI) # MARGIN=1 indicates rows
evaluate.true <- apply(nw, MARGIN=1, FUN=in.CI)
# How many times the CI contains the true mean m?
sum(evaluate)
sum(evaluate.true)
#question 1
n = 10
N = 10000
mu = 15
sigma = 2
#data frame stuff
frametest = data.frame(num=1:5, let=letters[1:5])
frametest
names(frametest)
frametest$let
attach(frametest)
attach(frametest)
attach(frametest)
#plot stuff
n=rnorm(20)
y = rep(1:4, each = 5)
#basic matrix and vector stuff
x= 1
#basic matrix and vector stuff
x= 1
y=2
a=matrix(1:50, ncol = 25, byrow = TRUE)
d=a*y #commenting
a=rbind(a, 1:25) #change the matrix to include another row, bind function attaches a row or column to the matrix
a[3,25] = 0
rm(y)
veccol = a[,25] #gets the 25 column of veccol
veccol #display veccol
#data frame stuff
frametest = data.frame(num=1:5, let=letters[1:5])
frametest
names(frametest)
frametest$let
attach(frametest)
let
num[3]
#plot stuff
n=rnorm(20)
y = rep(1:4, each = 5)
cbind(n, y) #display n and y all together
#boxplot ex
boxplot(n~y) # ~ "tild symbol", n is the dependant variable, y the independant (x-axis)
summary(n) #gives important values of a given set
#scatterplot ex
plot(y~n)
plot(n~y, xlab = "x axis name", ylab = "y axis title", main = "overall title")
#histogram ex
hist(n, col="red")
#helpful data sheet https://cran.r-project.org/doc/contrib/Short-refcard.pdf
#reading text files
#location  = read.delim("filenamehere.txt")
getwd() #get working directory. this is where files can be taken from in R
setwd("C:/Users/allan/Desktop/STAT 251") # set working directory to stats folder on desktop
#plot stuff
n=rnorm(20)
y = rep(1:4, each = 5)
cbind(n, y) #display n and y all together
#plot stuff
n=rnorm(20)
colnames(data)
setwd("C:/Users/allan/Desktop/Code/BDC 2020 - Team/US Data/")
data = read.csv("Unemployment_Populations.csv")
boxplot(data[3:5])
colnames(data)
names(data)[3] = '2018'
names(data)[4] = '2019'
names(data)[5] = 'April 2020'
data(SiouxFalls)
################ Trip Generation #################
productions<-rowSums(SiouxFalls.od)
attractions<-colSums(SiouxFalls.od)
################ Highway Skims #################
cost.function<-with(SiouxFalls.net$Links, function(...) FFTime)
aclass <- make.assignment.class(SiouxFalls.net, "All", SiouxFalls.od)
aset <- new.assignment.set(SiouxFalls.net,list(All=aclass),
cost.volume.type="vector", cost.function=cost.function)
paths <- build.paths(aset, aset$ff.cost)
travel.times <- skim.paths(paths,aset$ff.cost)[["All"]]
################ Trip Distribution #####################
base.distribution <- hwy.gamma.function(travel.times,-0.02,-0.123)
# HBW coefficients from NCHRP 365
trip.table <- ipf(base.distribution,list(rows=productions,
cols=attractions),method="absolute")
aset <- hwy.update.demand(aset,"All",trip.table)
################ Trip Assignment #####################
assignment.results <- highway.assign(aset,method="Frank.Wolfe")
loaded.links <- assignment.results$volumes
data(SiouxFalls)
